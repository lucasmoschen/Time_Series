p_male <- c(0.52, 0.48)
p_eth <- c(0.5, 0.2, 0.3)
p_age <- c(0.2,.1,0.2,0.2, 0.10, 0.1, 0.1)
p_income<-c(.50,.35,.15)
p_state_tmp<-runif(n = 50,min = 10,max = 20)
p_state<-p_state_tmp/sum(p_state_tmp)
poststrat$N<-0
total.population <- 250e6
for (j in 1:prod(J)){
poststrat$N[j] <- round(total.population * p_male[poststrat[j,1]+1] * p_eth[poststrat[j,2]] *
p_age[poststrat[j,3]]*p_income[poststrat[j,4]]*p_state[poststrat[j,5]]) #Adjust the N to be the number observed in each category in each group
}
# Now let's adjust for the probability of response
p_response_baseline <- 0.01
p_response_male <- c(2, 0.8) / 2.8
p_response_eth <- c(1, 1.2, 2.5) / 4.7
p_response_age <- c(0.1, 0.4, 1, 1.5,  3, 5, 7) / 18
p_response_inc <- c(1, 0.9, 0.8) / 2.7
p_response_state <- rbeta(50, 1, 1)
p_response_state <- p_response_state / sum(p_response_state)
p_response <- rep(NA, prod(J))
for (j in 1:prod(J)) {
p_response[j] <-
p_response_baseline * p_response_male[poststrat[j, 1] + 1] *
p_response_eth[poststrat[j, 2]] * p_response_age[poststrat[j, 3]] *
p_response_inc[poststrat[j, 4]] * p_response_state[poststrat[j, 5]]
}
people <- sample(prod(J), n, replace = TRUE, prob = poststrat$N * p_response)
## For respondent i, people[i] is that person's poststrat cell,
## some number between 1 and 32
n_cell <- rep(NA, prod(J))
for (j in 1:prod(J)) {
n_cell[j] <- sum(people == j)
}
coef_male <- c(0,-0.3)
coef_eth <- c(0, 0.6, 0.9)
coef_age <- c(0,-0.2,-0.3, 0.4, 0.5, 0.7, 0.8, 0.9)
coef_income <- c(0,-0.2, 0.6)
coef_state <- c(0, round(rnorm(49, 0, 1), 1))
coef_age_male <- t(cbind(c(0, .1, .23, .3, .43, .5, .6),
c(0, -.1, -.23, -.5, -.43, -.5, -.6)))
true_popn <- data.frame(poststrat[, 1:5], cat_pref = rep(NA, prod(J)))
for (j in 1:prod(J)) {
true_popn$cat_pref[j] <- plogis(   #logistic distribution
coef_male[poststrat[j, 1] + 1] +
coef_eth[poststrat[j, 2]] + coef_age[poststrat[j, 3]] +
coef_income[poststrat[j, 4]] + coef_state[poststrat[j, 5]] +
coef_age_male[poststrat[j, 1] + 1, poststrat[j, 3]]
)
}
#male or not, eth, age, income level, state, city
y <- rbinom(n, 1, true_popn$cat_pref[people])
male <- poststrat[people, 1]
eth <- poststrat[people, 2]
age <- poststrat[people, 3]
income <- poststrat[people, 4]
state <- poststrat[people, 5]
sample <- data.frame(cat_pref = y,
male, age, eth, income, state,
id = 1:length(people))
#Make all numeric:
for (i in 1:ncol(poststrat)) {
poststrat[, i] <- as.numeric(poststrat[, i])
}
for (i in 1:ncol(true_popn)) {
true_popn[, i] <- as.numeric(true_popn[, i])
}
for (i in 1:ncol(sample)) {
sample[, i] <- as.numeric(sample[, i])
}
list(
sample = sample,
poststrat = poststrat,
true_popn = true_popn
)
}
mrp_sim <- simulate_mrp_data(n = 1200)
str(mrp_sim)
sample <- mrp_sim[["sample"]]
poststrat <- mrp_sim[["poststrat"]]
true_popn <- mrp_sim[["true_popn"]]
fit <- stan_glmer(
cat_pref ~ factor(male) + factor(male)*factor(age) + (1 | state) + (1 | age) + (1 | eth) + (1 | income),
family = binomial(link="logit"),
data = sample
)
library(rstanarm)
library(ggplot2)
library(bayesplot)
library(dplyr)
library(tidyr)
theme_set(bayesplot::theme_default())
fit <- stan_glmer(
cat_pref ~ factor(male) + factor(male)*factor(age) + (1 | state) + (1 | age) + (1 | eth) + (1 | income),
family = binomial(link="logit"),
data = sample
)
print(fit)
posterior_prob <- posterior_linpred(fit, transform = TRUE, newdata = poststrat)
poststrat_prob <- posterior_prob %*% poststrat$N / sum(poststrat$N)
model_popn_pref <- c(mean = mean(poststrat_prob), sd = sd(poststrat_prob))
round(model_popn_pref, 3)
# Sample
sample_popn_pref <- mean(sample$cat_pref)
round(sample_popn_pref, 3)
# True Population´
true_popn_pref <- sum(true_popn$cat_pref * poststrat$N) / sum(poststrat$N)
round(true_popn_pref, 3)
?print.stanreg
t <- seq(0, n_days, by = 1)
t <- seq(0, 10, by = 1)
t
t[-1]
t <- seq(1, 10, by = 1)
t
library(outbreaks)
library(tidyverse)
head(influenza_england_1978_school)
ggplot(data = influenza_england_1978_school) +
geom_point(mapping = aes(x = date, y = in_bed)) +
labs(y = "Number of students in bed")
library(outbreaks)
library(tidyverse)
head(influenza_england_1978_school)
ggplot(data = influenza_england_1978_school) +
geom_point(mapping = aes(x = date, y = in_bed)) +
labs(y = "Number of students in bed")
library(rstan)
library(gridExtra)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(3)
# Série tempral
cases <- influenza_england_1978_school$in_bed
# População
N <- 763;
# tempo para integrar
n_days <- length(cases)
t <- seq(1, n_days, by = 1)
t0 = 0
# Condições iniciais
i0 <- 1
s0 <- N - i0
r0 <- 0
y0 = c(S = s0, I = i0, R = r0)
# Dados
data_sir <- list(n_days = n_days, y0 = y0, t0 = t0, ts = t, N = N, cases = cases)
# Iterações no MCMC
niter <- 2000
model <- stan_model("sir_negbin.stan")
# Série tempral
cases <- influenza_england_1978_school$in_bed
# População
N <- 763;
# tempo para integrar
n_days <- length(cases)
t <- seq(1, n_days, by = 1)
t0 = 0
# Condições iniciais
i0 <- 1
s0 <- N - i0
r0 <- 0
y0 = c(S = s0, I = i0, R = r0)
# Dados
data_sir <- list(n_days = n_days, y0 = y0, t0 = t0, ts = t, N = N, cases = cases)
# Iterações no MCMC
niter <- 2000
model <- stan_model("sir_negbin.stan")
fit_sir_negbin <- sampling(model,
data = data_sir,
iter = niter,
chains = 4)
help(rstan::extract)
help(extract)
help(tibble)
help(aes)
help(add_column)
stan_dens(fit_sir_negbin, pars = pars, separate_chains = TRUE, compute_likelihood = 1)
library(rstan)
library(gridExtra)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(3)
# Série tempral
cases <- influenza_england_1978_school$in_bed
library(outbreaks)
library(tidyverse)
head(influenza_england_1978_school)
ggplot(data = influenza_england_1978_school) +
geom_point(mapping = aes(x = date, y = in_bed)) +
labs(y = "Number of students in bed")
# Série tempral
cases <- influenza_england_1978_school$in_bed
# População
N <- 763;
# tempo para integrar
n_days <- length(cases)
t <- seq(1, n_days, by = 1)
t0 = 0
# Condições iniciais
i0 <- 1
s0 <- N - i0
r0 <- 0
y0 = c(S = s0, I = i0, R = r0)
# Dados
data_sir <- list(n_days = n_days, y0 = y0, t0 = t0, ts = t, N = N, cases = cases, compute_likelihood = 1)
# Iterações no MCMC
niter <- 2000
model <- stan_model("sir_negbin.stan")
fit_sir_negbin <- sampling(model,
data = data_sir,
iter = niter,
chains = 4)
data_sir
data_sir$compute_likelihood = 0
data_sir
pars=c('beta', 'gamma', "R0", "recovery_time")
print(fit_sir_negbin, pars = pars)
stan_dens(fit_sir_negbin, pars = pars, separate_chains = TRUE)
smr_pred <- cbind(as.data.frame(summary(
fit_sir_negbin, pars = "pred_cases", probs = c(0.05, 0.5, 0.95))$summary), t, cases)
colnames(smr_pred) <- make.names(colnames(smr_pred))
ggplot(smr_pred, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "orange", alpha = 0.6) +
geom_line(mapping = aes(x = t, y = X50.)) +
geom_point(mapping = aes(y = cases)) +
labs(x = "Day", y = "Number of students in bed")
params <- lapply(t, function(i){sprintf("y[%s,2]", i)}) #number of infected for each day
smr_y <- as.data.frame(summary(fit_sir_negbin,
pars = params, probs = c(0.05, 0.5, 0.95))$summary)
colnames(smr_y) <- make.names(colnames(smr_y)) # to remove % in the col names
ggplot(smr_y, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "orange", alpha = 0.6) +
geom_line(mapping = aes(x = t, y = X50.)) +
labs(x = "Day", y = "Number of infected students")
model <- stan_model("sir_negbin.stan")
data_sir$compute_likelihood = 0
fit_sir_prior <- sampling(model, data = data_sir, seed = 0, chains = 4)
library(outbreaks)
library(tidyverse)
head(influenza_england_1978_school)
ggplot(data = influenza_england_1978_school) +
geom_point(mapping = aes(x = date, y = in_bed)) +
labs(y = "Number of students in bed")
library(rstan)
library(gridExtra)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(3)
# Série tempral
cases <- influenza_england_1978_school$in_bed
# População
N <- 763;
# tempo para integrar
n_days <- length(cases)
t <- seq(1, n_days, by = 1)
t0 = 0
# Condições iniciais
i0 <- 1
s0 <- N - i0
r0 <- 0
y0 = c(S = s0, I = i0, R = r0)
# Dados
data_sir <- list(n_days = n_days, y0 = y0, t0 = t0, ts = t, N = N, cases = cases, compute_likelihood = 1)
# Iterações no MCMC
niter <- 2000
model <- stan_model("sir_negbin.stan")
fit_sir_negbin <- sampling(model,
data = data_sir,
iter = niter,
chains = 4)
pars=c('beta', 'gamma', "R0", "recovery_time")
print(fit_sir_negbin, pars = pars)
stan_dens(fit_sir_negbin, pars = pars, separate_chains = TRUE)
smr_pred <- cbind(as.data.frame(summary(
fit_sir_negbin, pars = "pred_cases", probs = c(0.05, 0.5, 0.95))$summary), t, cases)
colnames(smr_pred) <- make.names(colnames(smr_pred))
ggplot(smr_pred, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "orange", alpha = 0.6) +
geom_line(mapping = aes(x = t, y = X50.)) +
geom_point(mapping = aes(y = cases)) +
labs(x = "Day", y = "Number of students in bed")
params <- lapply(t, function(i){sprintf("y[%s,2]", i)}) #number of infected for each day
smr_y <- as.data.frame(summary(fit_sir_negbin,
pars = params, probs = c(0.05, 0.5, 0.95))$summary)
colnames(smr_y) <- make.names(colnames(smr_y)) # to remove % in the col names
ggplot(smr_y, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "orange", alpha = 0.6) +
geom_line(mapping = aes(x = t, y = X50.)) +
labs(x = "Day", y = "Number of infected students")
model <- stan_model("sir_negbin.stan")
data_sir$compute_likelihood = 0
fit_sir_prior <- sampling(model, data = data_sir, seed = 0, chains = 4)
s_prior <- rstan::extract(fit_sir_prior)
df_test <- tibble(r = s_prior$recovery_time)
ggplot(data = df_test) +
geom_histogram(mapping = aes(x = r), bins = 30) +
labs(x = "log(recovery time)") +
geom_vline(xintercept = 0.5, color = "red") +
geom_vline(xintercept = 30, color = "red") +
scale_x_log10()
df_test <- tibble(r = s_prior$R0)
ggplot(data = df_test) +
geom_histogram(mapping = aes(x = r), bins = 30) +
labs(x = "log(R0)") +
geom_vline(xintercept = 0.3, color = "red") +
geom_vline(xintercept = 30, color = "red") +
scale_x_log10()
n_draws <- 1000
draws <- as_tibble(t(s_prior[,,2][1:n_draws,])) %>% add_column(t = t)
n_draws <- 1000
draws <- as_tibble(t(s_prior[,2][1:n_draws,])) %>% add_column(t = t)
s_prior
n_draws <- 1000
draws <- as_tibble(t(s_prior[,,2][1:n_draws,])) %>% add_column(t = t)
s_prior <- rstan::extract(fit_sir_prior)
df_test <- tibble(r = s_prior$recovery_time)
ggplot(data = df_test) +
geom_histogram(mapping = aes(x = r), bins = 30) +
labs(x = "log(recovery time)") +
geom_vline(xintercept = 0.5, color = "red") +
geom_vline(xintercept = 30, color = "red") +
scale_x_log10()
df_test <- tibble(r = s_prior$R0)
ggplot(data = df_test) +
geom_histogram(mapping = aes(x = r), bins = 30) +
labs(x = "log(R0)") +
geom_vline(xintercept = 0.3, color = "red") +
geom_vline(xintercept = 30, color = "red") +
scale_x_log10()
n_draws <- 1000
draws <- as_tibble(t(s_prior[,,2][1:n_draws,])) %>% add_column(t = t)
s_prior[,,1]
s_prior[,1]
s_prior[1]
s_prior[2]
s_prior$y[,,2]
n_draws <- 1000
draws <- as_tibble(t(s_prior$y[,,2][1:n_draws,])) %>% add_column(t = t)
draws <- pivot_longer(draws, c(1:1000), names_to = "draw")
draws %>%
ggplot() +
geomm_line(mapping = aes(x = t, y = value, group = draw), alpha = 0.6, size = 0.1) +
geom_hline(yintercept = 763, color = "red") +
geom_text(x = 1.8, y = 747, label = "Population size", color = "red") +
labs(x = "Day", y = "Number of students in bed")
n_draws <- 1000
draws <- as_tibble(t(s_prior$y[,,2][1:n_draws,])) %>% add_column(t = t)
draws <- pivot_longer(draws, c(1:1000), names_to = "draw")
draws %>%
ggplot() +
geom_line(mapping = aes(x = t, y = value, group = draw), alpha = 0.6, size = 0.1) +
geom_hline(yintercept = 763, color = "red") +
geom_text(x = 1.8, y = 747, label = "Population size", color = "red") +
labs(x = "Day", y = "Number of students in bed")
smr_pred <- cbind(as.data.frame(summary(fit_sir_prior, pars="pred_cases",
probs=c(0.05, 0.5, 0.95))$summary), t)
colnames(smr_pred) <- make.names(colnames(smr_pred)) # to remove % in the col names
ggplot(smr_pred, mapping=aes(x=t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "orange", alpha = 0.6) +
geom_line(mapping=aes(x=t, y=X50.)) +
geom_hline(yintercept=763, color="red" ) +
geom_text(x=1.8, y=747, label="Population size", color="red") +
labs(x = "Day", y="Number of students in bed")
ml
data(ChestSize)
install.packages(tseries)
install.packages(tseries'')
install.packages("tseries")
install.packages("randtests")
readxl::read_excel('/home/lucasmoschen/Downloads/covidrj.xlsx')
covid
covid <- readxl::read_excel('/home/lucasmoschen/Downloads/covidrj.xlsx')
covid
library(randtests)
randtests::runs.test?
help(randtests::runs.test)
??randtests::runs.test
library(tseries)
factor(cycle(covid))
covid
factor(cycle(covid$deaths))
cycle??
c
help(cycle)
plot(covid$deaths)
ts
help(ts)
install.packages(zoo)
install.packages("zoo")
install.packages("zoo")
install.packages("zoo")
covid <- zoo(diff(covid$deaths), order.by = date$date[-1], frequency = 7)
library(zoo)
covid <- zoo(diff(covid$deaths), order.by = date$date[-1], frequency = 7)
covid <- readxl::read_xlsx('/home/lucasmoschen/Downloads/covidrj.xlsx')
plot(covid)
library(zoo)
covid <- readxl::read_xlsx('/home/lucasmoschen/Downloads/covidrj.xlsx')
data.zoo <-zoo(diff(covid$deaths), order.by = covid$date[-1], frequency = 7)
library(zoo)
covid <- readxl::read_xlsx('/home/lucasmoschen/Downloads/covidrj.xlsx')
#data.zoo <-zoo(diff(covid$deaths), order.by = covid$date[-1], frequency = 7)
covid.df <- zoo(diff(covid$deaths, 1), calendar = covid$date[-1], frequency = 7)
plot(covid.df)
help("zoo")
covid <- readxl::read_xlsx('/home/lucasmoschen/Downloads/covidrj.xlsx')
covid.df <- zoo(diff(covid$deaths, 1), calendar = covid$date[-1], frequency = 7)
plot(covid.df)
factor(covid.df)
?factor
cycle(covid.df)
cycle(covid.df, 7)
?cycle
rep(c(1,2), 3)
dec <- decompose(covid.df)
str(covid.df)
dec <- decompose(factor(covid.df))
exit
exit()
q()
#Importando bibliotecas
setwd("~/OneDrive/FGV/Eletivas ou Complementares/Séries Temporais/trabalho1")
cars_df  = read.csv('norway_new_car_sales_by_make.csv')
cars_df
my_data %>% filter(cars_df.Make == make)
filter(cars_df.Make == make)
cars_df.Make
filter(cars_df$Make == make)
make = 'Toyota'
filter(cars_df$Make == make)
a %>% filter(cars_df$Make == make)
subset(cars_df, Make == make)
make_df = subset(cars_df, Make == make)
plot(make_df$Quantity)
plot(make_df$Year, make_df$Quantity)
plot(make_df$Month, make_df$Quantity)
plot(make_df$Quantity)
plot(make_df$Quantity)
#Importando bibliotecas
library(dplyr)
make_df <- make_df %>% dplyr::mutate(Period = lubridate::ymd_hm(paste(Year, Month))
)
make_df
cars_df  = read.csv('norway_new_car_sales_by_make.csv')
make = 'Toyota'
make_df = subset(cars_df, Make == make)
make_df <- make_df %>% dplyr::mutate(Period = lubridate::ymd_hm(paste(Year, Month)))
dplyr::mutate(Period = lubridate::ymd_hm(paste(Year, Month)))
dplyr::mutate(Period = lubridate::ymd_hm(paste(make_df$Year, make_df$Month)))
plot(make_df$Quantity)
plot(make_df$Quantity, ylab = 'Vendas')
plot(make_df$Quantity, ylab = 'Vendas')
#Importando bibliotecas
library(dplyr)
setwd("~/OneDrive/FGV/Eletivas ou Complementares/Séries Temporais/trabalho1")
cars_df  = read.csv('norway_new_car_sales_by_make.csv')
make = 'Toyota'
make_df = subset(cars_df, Make == make)
plot(make_df$Quantity, ylab = 'Vendas')
library(zoo)
zoo(cars_df)
zoo(cars_df, start  = c(2007,1))
zooreg(cars_df, start  = c(2007,1))
zooreg(make_df, start  = c(2007,1))
library(forecast)
zooreg(make_df, start  = c(2007,1), frequency = 1)
zooreg(make_df, start  = c(2007,1), frequency = 1)
make_df$Date <- zoo::as.yearmon(paste(make_df$Year, make_df$Year), "%Y %m")
plot(make_df$Quantity, ylab = 'Vendas')
plot(make_df$Date, make_df$Quantity, ylab = 'Vendas')
#Importando bibliotecas
library(dplyr)
#Importando bibliotecas
library(dplyr)
library(zoo)
#Importando bibliotecas
library(dplyr)
library(zoo)
library(forecast)
#Importando bibliotecas
library(dplyr)
library(zoo)
library(forecast)
setwd("~/OneDrive/FGV/Eletivas ou Complementares/Séries Temporais/trabalho1")
cars_df  = read.csv('norway_new_car_sales_by_make.csv')
make = 'Toyota'
make_df = subset(cars_df, Make == make)
make_df$Date <- zoo::as.yearmon(paste(make_df$Year, make_df$Year), "%Y %m")
plot(make_df$Date, make_df$Quantity, ylab = 'Vendas')
make_df$Date <- zoo::as.yearmon(paste(make_df$Year, make_df$Month), "%Y %m")
plot(make_df$Date, make_df$Quantity, ylab = 'Vendas')
plot(make_df$Date, make_df$Quantity, xlab = 'Ano', ylab = 'Vendas')
plot(make_df$Date, make_df$Quantity, xlab = 'Ano', ylab = 'Vendas',
main = 'Vendas de Carros da Marca Toyota por mês')
plot(make_df$Date, make_df$Quantity, xlab = 'Ano', ylab = 'Vendas',
main = 'Vendas de carros da marca Toyota por mês')
stl(make_df)
stl(make_df$Quantity)
stl(make_df$Quantity, s.window = 7)
stl(ts(make_df$Quantity), s.window = 7)
stl(ts(make_df$Quantity, frequency = 7), s.window = 7)
plot(stl(ts(make_df$Quantity, frequency = 12), s.window = 12))
plot(stl(ts(make_df$Quantity, frequency = 7), s.window = 7))
plot(stl(ts(make_df$Quantity, frequency = 12), s.window = 12))
plot(stl(ts(make_df$Quantity, frequency = 12)))
decomposition = stl(zooreg(make_df$Quantity, frequency = 12), s.window = 12)
plot(decomposition)
decomposition = stl(zooreg(make_df$Quantity, start = c(2007,1), frequency = 12), s.window = 12)
plot(decomposition)
plot(decomposition, xlab = 'Years')
plot(decomposition)
